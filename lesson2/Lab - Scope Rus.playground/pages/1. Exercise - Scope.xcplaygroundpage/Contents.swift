/*:
 ##  Упражнение - область видимости
 
 С помощью комментария или оператора print, объясните, почему код ниже выдаст ошибку времени компиляции, если вы уберёте комментарий в строке 10.
*/
for _ in 0..<10 {
    let foo = 55
    print("Значение foo равно \(foo)")
}
//print("Значение foo равно \(foo)")
print("const foo видна только в теле цикла, мы не можем к ней обратится за пределами for in цикла")


/*:
 С помощью комментария или оператора print, объясните, почему оба оператора print ниже компилируются, при том, что похожий код выше выдавал ошибку.  В какой области видимости определена переменная `x`, а в какой области она используется?  Сравните, в какой области определена и используется `foo`.
 */
var x = 10
for _ in 0..<10 {
    x += 1
    print("The value of x is \(x)")
}
print("The final value of x is \(x)")
// var x объявленна, как глобальная переменная. И мы можем к ней обратится в любой момент и в любой области видемости. к foo имеем доступ только в теле цикла

/*:
 В теле функции `greeting` ниже, используйте затенение переменных для извлечения `greeting`.  Если `greeting` извлечён успешно, напечатайте предложение-приветствие с использованием данного имени (например, если `greeting` будет иметь значение "Привет", а `name` — `Аня`, напечатайте "Привет, Аня!"). В противном случае, используйте "Здравствуйте", чтобы напечатать приветствие с заданным именем.  Вызовите функцию дважды — один раз передав строку для приветствия, а второй раз — `nil`.
 */
func greeting(greeting: String?, name: String) {
    if let greeting = greeting {
        print("\(greeting), \(name)!")
    } else {
        print("greeting is nil")
    }
}
greeting(greeting: "Привет", name: "Аня")
greeting(greeting: nil, name: "Anna")
/*:
 Создайте класс с именем `Car` (машина).  У него должны быть свойства `make` (производитель), `model` (модель) и `year` (год) типов `String`, `String` и `Int`, соответственно.  Так как это класс, вам нужно написать свой собственный конструктор.  Используйте затенение при выборе имён для параметров вашего инициализатора.
 */
class Car {
    let make: String
    let model: String
    let year: Int
    
    init(make: String, model: String, year: Int) {
        self.make = make
        self.model = model
        self.year = year
    }
}

let car = Car(make: "Japan", model: "Honda", year: 2010)
//: страница 1 из 2  |  [Далее: упражнение для приложения - соревнование](@next)
