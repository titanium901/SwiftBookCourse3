import Foundation
/*:
 ## Упражнение для приложения - функции для еды
 
 >Эти упражнения закрепляют понимание Swift в контексте фитнес-приложения.
 
 Ваше приложение позволяет пользователю контролировать количество съеденной еды.  После того, как еда была занесена в журнал, пользователи могут вернуться и увидеть, что именно они ели в определённый момент времени.
 
 Напишите функцию, которая принимает параметр типа `String`, и которой вы будете далее передавать значения из списка: "завтрак", "обед", "ужин".  Функция должна вернуть объект типа `Meal`, соответствующий данному описанию, либо `nil`, если пользователь ещё не занёс описание в журнал.  Обратите внимание, что объект `Meal` и словарь `meals`, описывающий журнал принятия пищи, созданы для вас ниже.  Вызовите функцию пару раз и выведите полученное значение.
 */
struct Meal {
    var food: [String]
    var calories: Int
}

var meals: [String: Meal] = ["завтрак": Meal(food: ["тост", "апельсиновый сок", "яичные белки"], calories: 530)]

func whatEat(meal: String) -> Meal? {
    if let meal = meals[meal] {
        return meal

    } else {
        return nil
    }
}

print(whatEat(meal: "завтрак"))
/*:
 В iOS есть несколько API для сохранения значений в постоянную память.  На одном из будущих уроков мы изучим эту тему.  Представьте, какие ужасные отзывы получило бы приложение, если бы при каждом его открытии все данные пользователей исчезали.
 
 Напишите функцию, которая проверит, записан ли журнал приёмов пищи (словарь из упражнения выше) в постоянную память устройства.  Если это так, возвратите этот журнал.  Если нет, верните пустой словарь типа `[String: Any]`.  Код для извлечения записанных в постоянную память значений следующий: `UserDefaults.standard.dictionary(forKey: "mealLog")`.  Этот код вернёт опциональное значение типа `[String: Any]`.  Если он вернёт значение, это и будет вашим журналом приёма пищи.  Если он вернёт `nil`, значит, ранее журнал не записывался.  Вызовите эту функцию и напечатайте возвращённое значение.
 */
func checkJournal(name: String) -> [String: Any]? {
    if let userDef = UserDefaults.standard.dictionary(forKey: name) {
        return userDef
    } else {
        return nil
    }    
}

checkJournal(name: "завтрак")
//: [Ранее](@previous)  |  страница 4 из 6  |  [Далее: упражнение - проваливающиеся инициализаторы](@next)
